[{"content":"Now that I have custom tasks for building and serving my Hugo site in Visual Studio Code, I wanted to create posts quickly without having to remember the hugo command. So, this is what I did:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;tasks\u0026#34;: [ { \u0026#34;label\u0026#34;: \u0026#34;New Post\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;title=\\\u0026#34;${input:title}\\\u0026#34; \u0026amp;\u0026amp; slug=\\\u0026#34;${title// /-}\\\u0026#34; \u0026amp;\u0026amp; hugo new content/post/${slug,,}/index.md --source ./src\u0026#34;, \u0026#34;problemMatcher\u0026#34;: [] } ], \u0026#34;inputs\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Enter the title of the new post\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;promptString\u0026#34; } ] }   The Variable Substitution section of the Visual Studio docs provides information on getting input from the user.\nFirst, I defined the inputs by providing the id, description, and type. Then the most interesting part:\nThe command:\n1  title=\u0026#34;${input:title}\u0026#34; \u0026amp;\u0026amp; slug=\u0026#34;${title// /-}\u0026#34; \u0026amp;\u0026amp; hugo new content/post/${slug,,}/index.md --source ./src   does three (3) things using bash:\n  Save the input text into a variable named title\n1  title=\u0026#34;${input:title}\u0026#34;     Replace spaces in the title variable with dashes and store the output in another variable named slug:\n1  slug=\u0026#34;${title// /-}\u0026#34;     Execute hugo command to create the content file:\n1  hugo new content/post/${slug,,}/index.md --source ./src   This last command converts the contents of the slug variable to lowercase. Pretty neat!\n  So far I\u0026rsquo;m pretty pleased with my experience with the Hugo static site generator.\n","date":"2022-03-17T18:39:12Z","image":"https://www.chingono.com/blog/2022/03/17/defining-task-quickly-creating-hugo-posts-vscode/cover_hub8e99cfaeac9e6974b03f6aa110414f0_82550_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.chingono.com/blog/2022/03/17/defining-task-quickly-creating-hugo-posts-vscode/","title":"Defining A Task for Quickly Creating Hugo Posts In Visual Studio Code"},{"content":"Now that I can run the site locally, I needed a quick way to run the hugo command for creating new blog posts. After quick search on the internet, I found the article Tasks in Visual Studio Code very helpful. In short, I had to define the build task this way:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;tasks\u0026#34;: [ { \u0026#34;label\u0026#34;: \u0026#34;Build\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;hugo --source ./src\u0026#34;, \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true } } ] }   This task executes the hugo command which generates your website to the public/ directory by default and makes it ready to be deployed to your web server. The --source argument ensures the correct folder is built. In addition, setting \u0026quot;kind\u0026quot;: \u0026quot;build\u0026quot; and \u0026quot;isDefault\u0026quot;: true ensures that this task is executed with the Ctrl+Shift+Bkeyboard shortcut.\nNext, I added another task to run the site locally:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  { \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;tasks\u0026#34;: [ { \u0026#34;label\u0026#34;: \u0026#34;Build\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;hugo --source ./src\u0026#34;, \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true } }, { \u0026#34;label\u0026#34;: \u0026#34;Serve\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;hugo server -D --source ./src\u0026#34;, \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34; }, \u0026#34;isBackground\u0026#34;: true, \u0026#34;problemMatcher\u0026#34;: [] } ] }   This task executes the hugo server command. The -D flag ensures that we can preview content in draft mode, and again, the --source argument ensures the correct folder is served. It\u0026rsquo;s important to note that the Serve does not have \u0026quot;isDefault\u0026quot;: true since we do not want the two tasks to conflict when using the Ctrl+Shift+Bkeyboard shortcut.\nSo far I\u0026rsquo;m pretty pleased with my experience with the Hugo static site generator.\n","date":"2022-03-16T20:44:03Z","image":"https://www.chingono.com/blog/2022/03/16/defining-tasks-quickly-building-serving-hugo-site/cover_hu853181193b62abd8fd8dded5a69822fd_43411_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.chingono.com/blog/2022/03/16/defining-tasks-quickly-building-serving-hugo-site/","title":"Defining Tasks for Quickly Building and Serving a Hugo Site"},{"content":"  Clone repo in Codespaces\n  Add Hugo devcontainer\n Click the \u0026ldquo;Codespaces\u0026rdquo; button in the bottom-left corner of Visual Studio Code Click \u0026ldquo;Add Development Container Configuration Files\u0026rdquo; Click \u0026ldquo;Show All Definitions\u0026rdquo; Click \u0026ldquo;Hugo (Community)\u0026rdquo; Click \u0026ldquo;OK\u0026rdquo;    Create new hugo site:\n1  \u0026gt;hugo new site blog     Try to create new hugo module https://docs.stack.jimmycai.com/getting-started\n1 2  \u0026gt;hugo mod init github.com/achingono/achingono.github.io Error: failed to init modules: binary with name \u0026#34;go\u0026#34; not found     Add go binary to devcontainer docker file\n1 2 3 4 5 6 7 8 9 10  # GO versionARG GO_VERSION=18 #Download GoRUN wget https://golang.org/dl/go1.${GO_VERSION}.linux-amd64.tar.gz \u0026amp;\u0026amp; \\  tar -C /usr/local -xzf go1.${GO_VERSION}.linux-amd64.tar.gz \u0026amp;\u0026amp; \\  rm go1.${GO_VERSION}.linux-amd64.tar.gzENV GOPATH /goENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH    Check go version\n1 2  \u0026gt;go version go version go1.18 linux/amd64     Turn new site into a Hugo module:\n1 2 3 4  \u0026gt;hugo mod init github.com/achingono/achingono.github.io go: creating new go.mod: module github.com/achingono/achingono.github.io go: to add module requirements and sums: go mod tidy     Declare the hugo-theme-stack module as a dependency of your site:\n1 2 3 4  \u0026gt;hugo mod get github.com/CaiJimmy/hugo-theme-stack/v3 go: downloading github.com/CaiJimmy/hugo-theme-stack/v3 v3.10.0 go: downloading github.com/CaiJimmy/hugo-theme-stack v2.6.0+incompatible go: added github.com/CaiJimmy/hugo-theme-stack/v3 v3.10.0     Grab config file from example site\n1  \u0026gt;wget https://raw.githubusercontent.com/CaiJimmy/hugo-theme-stack/master/exampleSite/config.yaml     Update config.yaml file\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  baseurl:https://achingono.github.iolanguageCode:en-ustheme:github.com/CaiJimmy/hugo-theme-stack/v3paginate:5title:Alfero Chingonolanguages:en:languageName:Englishtitle:Alfero Chingonoweight:1# Change it to your Disqus shortname before usingdisqusShortname:achingono# GA Tracking IDgoogleAnalytics:# Theme i18n support# Available values: en, fr, id, ja, ko, pt-br, zh-cn, zh-tw, es, de, nl, it, th, el, uk, arDefaultContentLanguage:en# Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko]# This will make .Summary and .WordCount behave correctly for CJK languages.hasCJKLanguage:falsepermalinks:post:/blog/:slug/page:/:slug/...module:# uncomment line below for temporary local development of module# replacements: \u0026#34;github.com/CaiJimmy/hugo-theme-stack/v3 -\u0026gt; ../../hugo-theme-stack\u0026#34;imports:- path:github.com/CaiJimmy/hugo-theme-stack/v3disable:false  Delete config.toml file Create new post Run hugo server -D Browse to http://127.0.0.1:1313  ","date":"2022-03-15T00:00:00Z","image":"https://www.chingono.com/blog/2022/03/15/hugo-blog-powered-by-github-pages-codespaces/cover_hu5e91b4f7e7a4ba6ba63ef7778b07ef87_84336_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.chingono.com/blog/2022/03/15/hugo-blog-powered-by-github-pages-codespaces/","title":"Hugo blog powered by GitHub Pages and GitHub Codespaces"},{"content":"In my previous post; Reference Build Arguments in Docker Startup Script, I showed how I added reusability to my Dockerfile by adding build arguments.\nThe docker builder CMD reference document states:\n If you would like your container to run the same executable every time, then you should consider using ENTRYPOINT in combination with CMD. See ENTRYPOINT.\nIf the user specifies arguments to docker run then they will override the default specified in CMD.\n So, after some fiddling around, I ended up with the following final version of my Dockerfile:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  # [Choice] .NET Core version: 5.0, 3.1, 2.1ARG VARIANT=3.1ARG DB_SERVICE=db ARG DB_SERVICE_PORT=1433 ARG PROJECT=Business.Web# create a base runtime image with nodeFROMmcr.microsoft.com/dotnet/core/aspnet:${VARIANT} AS runtimeEXPOSE80EXPOSE443RUN curl -sL https://deb.nodesource.com/setup_10.x | bash -RUN apt-get install -y nodejs# create a base SDK image with nodeFROMmcr.microsoft.com/dotnet/core/sdk:${VARIANT} as sdkRUN curl -sL https://deb.nodesource.com/setup_10.x | bash -RUN apt-get install -y nodejs# copy source filesFROMsdk as buildCOPY src/ ./src# restore nuget packagesWORKDIR/srcRUN dotnet restore# run publish commandFROMbuild as publishRUN dotnet publish -c Release -o /release --no-restore# create release image from base runtime imageFROMruntime AS release# https://github.com/moby/moby/issues/37345#issuecomment-400245466ARG PROJECTENV ASSEMBLY=${PROJECT}.dllCOPY --from=publish /release .COPY entrypoint.sh .COPY testconnection.sh .RUN chmod +x ./entrypoint.shRUN chmod +x ./testconnection.shENTRYPOINT [ \u0026#34;./entrypoint.sh\u0026#34; ]CMD [\u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;$DB_SERVICE $DB_SERVICE_PORT dotnet $ASSEMBLY\u0026#34;]  Configuring it this way allows me to supply different arguments when running the container without having to specify entrypoint.sh every time. Small change, and I hope this proves helpful to you, dear reader. All comments and feedback will be greatly appreciated.\n","date":"2021-07-15T17:51:18Z","image":"https://www.chingono.com/cover.jpg","permalink":"https://www.chingono.com/blog/2021/07/15/dockerfile-combine-entrypoint-cmd/","title":"Combining ENTRYPOINT and CMD in a Dockerfile"},{"content":"In my previous post; Waiting for Docker Service Container Port to Be Ready, I showed how I managed to delay container application code execution until another service is ready to accept tcp connections.\nIf this post, I\u0026rsquo;m going to improve on that solution and make it more reusable by adding environment variables to the the Dockerfile and to the docker-compose.yml.\nHere\u0026rsquo;s the updated Dockerfile:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  # [Choice] .NET Core version: 5.0, 3.1, 2.1ARG VARIANT=3.1ARG DB_SERVICE=db ARG DB_SERVICE_PORT=1433 ARG PROJECT=Business.Web# create a base runtime image with nodeFROMmcr.microsoft.com/dotnet/core/aspnet:${VARIANT} AS runtimeEXPOSE80EXPOSE443RUN curl -sL https://deb.nodesource.com/setup_10.x | bash -RUN apt-get install -y nodejs# create a base SDK image with nodeFROMmcr.microsoft.com/dotnet/core/sdk:${VARIANT} as sdkRUN curl -sL https://deb.nodesource.com/setup_10.x | bash -RUN apt-get install -y nodejs# copy source filesFROMsdk as buildCOPY src/ ./src# restore nuget packagesWORKDIR/srcRUN dotnet restore# run publish commandFROMbuild as publishRUN dotnet publish -c Release -o /release --no-restore# create release image from base runtime imageFROMruntime AS release# https://github.com/moby/moby/issues/37345#issuecomment-400245466ARG PROJECTENV DB_SERVICE=${DB_SERVICE}ENV DB_SERVICE_PORT=${DB_SERVICE_PORT}ENV ASSEMBLY=${PROJECT}.dllCOPY --from=publish /release .COPY entrypoint.sh .COPY testconnection.sh .RUN chmod +x ./entrypoint.shRUN chmod +x ./testconnection.shCMD [\u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;./entrypoint.sh $DB_SERVICE $DB_SERVICE_PORT dotnet $ASSEMBLY\u0026#34;]  And the docker-compose.yml file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  # https://docs.docker.com/compose/compose-file/compose-file-v3/version:\u0026#39;3\u0026#39;services:app:build:context:.dockerfile:Dockerfileargs:# [Choice] Update \u0026#39;VARIANT\u0026#39; to pick a .NET Core version: 2.1, 3.1, 5.0VARIANT:3.1DB_SERVICE:dbDB_SERVICE_PORT:1433PROJECT:Business.Webimage:business_webenvironment:- ASPNETCORE_ENVIRONMENT=Testing- ASPNETCORE_URLS=http://+:80- ASPNETCORE_ConnectionStrings__Db=Server=db;Database=Business.Web;User ID=sa;Password=V3ry$ecureP@ssw0rd;MultipleActiveResultSets=False;Connection Timeout=30;- DB_SERVICE=db- DB_SERVICE_PORT=1433# https://docs.docker.com/compose/startup-order/depends_on:- dbrestart:on-failureports:- \u0026#34;8080:80\u0026#34;- \u0026#34;8443:443\u0026#34;volumes:- ~/.aspnet/https:/https:ro db:image:mcr.microsoft.com/mssql/server:2019-latestrestart:unless-stoppedenvironment:- SA_PASSWORD=V3ry$ecureP@ssw0rd- ACCEPT_EULA=Y  With this setup, I can create multiple image variations with the same Dockerfile by supplying the three arguments:\n1 2 3  DB_SERVICE: db DB_SERVICE_PORT: 1433 PROJECT: Business.Web  And when I run the docker image, I can also supply the same three environment variables in order to override the container defaults. Hopefully this proves helpful to you, dear reader. All feedback will be greatly appreciated.\n","date":"2021-03-11T21:27:40Z","image":"https://www.chingono.com/blog/2021/03/11/reference-environment-variables-docker-startup-script/cover_hu5baa1151b514a27cf3a27c15e1c673f5_55131_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.chingono.com/blog/2021/03/11/reference-environment-variables-docker-startup-script/","title":"Reference Environment Variables in Docker Startup Script"},{"content":"Recently, I was working on a pet project and had created my Dockerfile for the ASP.NET Core container as well as the docker-compose.yml file to compose the services.\nHere\u0026rsquo;s the Dockerfile I had:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  # [Choice] .NET Core version: 5.0, 3.1, 2.1ARG VARIANT=3.1# create a base runtime image with nodeFROMmcr.microsoft.com/dotnet/core/aspnet:${VARIANT} AS runtimeEXPOSE80EXPOSE443RUN curl -sL https://deb.nodesource.com/setup_10.x | bash -RUN apt-get install -y nodejs# create a base SDK image with nodeFROMmcr.microsoft.com/dotnet/core/sdk:${VARIANT} as sdkRUN curl -sL https://deb.nodesource.com/setup_10.x | bash -RUN apt-get install -y nodejs# copy source filesFROMsdk as buildCOPY src/ ./src# install npm packages#WORKDIR /src/Business.Web/Spa#RUN npm install#RUN npm run build# restore nuget packagesWORKDIR/srcRUN dotnet restore# run publish commandFROMbuild as publishRUN dotnet publish -c Release -o /release --no-restore# create release image from base runtime imageFROMruntime AS releaseCOPY --from=publish /release .ENTRYPOINT [\u0026#34;dotnet\u0026#34;, \u0026#34;Business.Web.dll\u0026#34;]  And the docker-compose.yml file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  # https://docs.docker.com/compose/compose-file/compose-file-v3/version:\u0026#39;3\u0026#39;services:app:build:context:.dockerfile:Dockerfileargs:# [Choice] Update \u0026#39;VARIANT\u0026#39; to pick a .NET Core version: 2.1, 3.1, 5.0VARIANT:3.1image:business_webenvironment:- ASPNETCORE_ENVIRONMENT=Testing- ASPNETCORE_URLS=http://+:80- ASPNETCORE_ConnectionStrings__Db=Server=db;Database=Business.Web;User ID=sa;Password=V3ry$ecureP@ssw0rd;MultipleActiveResultSets=False;Connection Timeout=30;# https://docs.docker.com/compose/startup-order/depends_on:- dbrestart:on-failureports:- \u0026#34;8080:80\u0026#34;- \u0026#34;8443:443\u0026#34;volumes:- ~/.aspnet/https:/https:ro db:image:mcr.microsoft.com/mssql/server:2019-latestrestart:unless-stoppedenvironment:- SA_PASSWORD=V3ry$ecureP@ssw0rd- ACCEPT_EULA=Y  My biggest challenge was that even though I had set the app service to depend on the db service, the app service would start before the db service was really ready to receive connections. This resulted in .net startup errors, crash loops and the container eventually shutting down:\n1 2 3 4 5 6 7 8 9  info: Microsoft.EntityFrameworkCore.Infrastructure[10403] Entity Framework Core 3.1.3 initialized \u0026#39;DataContext\u0026#39; using provider \u0026#39;Microsoft.EntityFrameworkCore.SqlServer\u0026#39; with options: None crit: Microsoft.AspNetCore.Hosting.Diagnostics[6] Application startup exception Microsoft.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 35 - An internal exception was caught) ---\u0026gt; System.Net.Internals.SocketExceptionFactory+ExtendedSocketException (00000001, 11): Resource temporarily unavailable   Since there was some initialization code and database seeding that had to take place before the application was ready to run, I wanted to ensure that the dotnet code started only when the database container/service was ready to receive connections.\nAfter some searching on the internet, I found this answer on the Unix StackExchange:\nTesting remote TCP port using telnet by running a one-line command\nNow, I needed to ensure this command runs before launching the .net site, and only after the db server was ready to receive connections on port 1433. So, after some further searching, trial and error, I eventually landed on the following two scripts:\ntestconnection.sh is a copy of the code found on Unix StackExchange:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #!/bin/bash # https://unix.stackexchange.com/a/406356 if [ \u0026#34;$2\u0026#34; == \u0026#34;\u0026#34; ]; then echo \u0026#34;Syntax: $0\u0026lt;host\u0026gt; \u0026lt;port\u0026gt;\u0026#34; exit; fi host=$1 port=$2 r=$(bash -c \u0026#39;exec 3\u0026lt;\u0026gt; /dev/tcp/\u0026#39;$host\u0026#39;/\u0026#39;$port\u0026#39;;echo $?\u0026#39; 2\u0026gt;/dev/null) if [ \u0026#34;$r\u0026#34; = \u0026#34;0\u0026#34; ]; then echo \u0026#34;$host$portis open\u0026#34; else echo \u0026#34;$host$portis closed\u0026#34; exit 1 # To force fail result in ShellScript fi   entrypoint.sh is the entry point of the container. It checks the tcp port for readiness then executes the command for the container when the tcp port is open:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #!/bin/bash set -e # get the first two arguments server=$1 port=$2 # check if we have 3 or more arguments if [ \u0026#34;$3\u0026#34; == \u0026#34;\u0026#34; ]; then echo \u0026#34;Syntax: $0\u0026lt;host\u0026gt; \u0026lt;port\u0026gt; \u0026lt;command\u0026gt; [\u0026lt;arg\u0026gt;, \u0026lt;arg\u0026gt;, ...]\u0026#34; exit; fi # use the first two arguments to test the tcp connection echo \u0026#34;Testing connection to ${server}:${port}\u0026#34; until ./testconnection.sh $server $port; do \u0026gt;\u0026amp;2 echo \u0026#34;SQL Server is starting up\u0026#34; sleep 1 done \u0026gt;\u0026amp;2 echo \u0026#34;SQL Server is up - executing command\u0026#34; # https://stackoverflow.com/a/3816747 # use the rest of the arguments to start up the container exec \u0026#34;${@:3}\u0026#34;   Key points to note here are that entrypoint.sh uses the first two arguments for checking the tcp port and the rest of the arguments for container startup. So, instead of starting up our container this way:\n1  ENTRYPOINT [\u0026#34;dotnet\u0026#34;, \u0026#34;Business.Web.dll\u0026#34;]  We will use the following approach instead:\n1 2 3 4 5 6  COPY entrypoint.sh .COPY testconnection.sh .RUN chmod +x ./entrypoint.shRUN chmod +x ./testconnection.shCMD /bin/bash ./entrypoint.sh db 1433 dotnet Business.Web.dll  When the services are started with this new dockerfile, this is what I got in the logs:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  SQL Server is starting up SQL Server is starting up SQL Server is starting up SQL Server is starting up SQL Server is starting up SQL Server is up - executing command: \u0026#39;sh -c dotnet Business.Web.dll\u0026#39; Testing connection to data:1433 data 1433 is closed data 1433 is closed data 1433 is closed data 1433 is closed data 1433 is closed data 1433 is open info: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[64] Azure Web Sites environment detected. Using \u0026#39;/root/ASP.NET/DataProtection-Keys\u0026#39; as key repository; keys will not be encrypted at rest. warn: Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository[60] Storing keys in a directory \u0026#39;/root/ASP.NET/DataProtection-Keys\u0026#39; that may not be persisted outside of the container. Protected data will be unavailable when info: Microsoft.EntityFrameworkCore.Infrastructure[10403] Entity Framework Core 5.0.6 initialized \u0026#39;DataContext\u0026#39; using provider \u0026#39;Microsoft.EntityFrameworkCore.SqlServer\u0026#39; with options: None info: Microsoft.EntityFrameworkCore.Database.Command[20101] Executed DbCommand (22ms) [Parameters=[], CommandType=\u0026#39;Text\u0026#39;, CommandTimeout=\u0026#39;30\u0026#39;] SELECT 1   As you can see, this solution allowed my app container to wait for as long as it needed to before starting the .net application. Hopefully, you find that helpful, dear reader.\n","date":"2021-03-04T12:21:28Z","image":"https://www.chingono.com/blog/2021/03/04/waiting-docker-service-container-port-ready/cover_hu62f23ae666e781c65386d17f3dc1416f_38807_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.chingono.com/blog/2021/03/04/waiting-docker-service-container-port-ready/","title":"Waiting for Docker Service Container Port to Be Ready"}]